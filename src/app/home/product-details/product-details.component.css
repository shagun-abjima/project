.overlay {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.7);
    overflow-y: scroll;
  }
  
  .popup {
    margin: 30px auto;
    padding: 20px;
    background: #fff;
    border-radius: 5px;
    width: 50vw;
    position: relative;
  }
  
  .popup h2 {
    margin-top: 0;
    color: #333;
    font-family: Tahoma, Arial, sans-serif;
  }
  .popup .close {
    position: absolute;
    top: 20px;
    right: 30px;
    transition: all 200ms;
    font-size: 30px;
    font-weight: bold;
    text-decoration: none;
    color: #333;
  }
  .popup .close:hover {
    color: #06D85F;
  }
  .popup .content {
    max-height: 30%;
    overflow: auto;
  }
  
  @media screen and (max-width: 700px){
    .popup{
      width: 70%;
    }
  }
  hr{
    border: #28282B 3px solid;
    margin: 15px 0px;
  }
  .container {
    position: relative;
    max-width: 700px;
    width: 100%;
    background: #fff;
    padding: 25px;
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
  }
  .container header {
    font-size: 1.5rem;
    color: #333;
    font-weight: 500;
    text-align: center;
  }
  .container .form {
    margin-top: 30px;
  }
  .form .input-box, textarea {
    width: 100%;
    margin-top: 20px;
  }
  .input-box label {
    color: #333;
  }
  .form :where(.input-box input, .select-box) {
    position: relative;
    height: 50px;
    width: 100%;
    outline: none;
    font-size: 1rem;
    color: #707070;
    margin-top: 8px;
    border: 2px solid #aaa; 
    border-radius: 6px;
    padding: 0 15px;
  }

  textarea{
    border: 2px solid #aaa;
    border-radius: 6px;
    padding: 10px 15px;
  }
  
  .form .column {
    display: flex;
    column-gap: 15px;
  }
  .form .gender-box {
    margin-top: 20px;
  }
  .gender-box h3 {
    color: #333;
    font-size: 1rem;
    font-weight: 400;
    margin-bottom: 8px;
  }
  .form :where(.gender-option, .gender) {
    display: flex;
    align-items: center;
    column-gap: 50px;
    flex-wrap: wrap;
  }
  .form .gender {
    column-gap: 5px;
  }
  .gender input {
    accent-color: rgb(130, 106, 251);
  }
  .form :where(.gender input, .gender label) {
    cursor: pointer;
  }
  .gender label {
    color: #707070;
  }
  .address :where(input, .select-box) {
    margin-top: 15px;
  }
  .select-box select {
    height: 100%;
    width: 100%;
    outline: none;
    border: none;
    color: #707070;
    font-size: 1rem;
  }
  .form button {
    height: 55px;
    width: 100%;
    color: #fff;
    font-size: 1rem;
    font-weight: 400;
    margin-top: 30px;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
    background: #3498DB;
  }
  .form button:hover {
    background: rgb(88, 56, 250);
  }
  /*Responsive*/
  @media screen and (max-width: 500px) {
    .form .column {
      flex-wrap: wrap;
    }
    .form :where(.gender-option, .gender) {
      row-gap: 15px;
    }
  }
  .form-button{
    background-color: #ff9f00;
  }




  /* // user.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { login, signUp } from '../model/user-type';
 
@Injectable({
  providedIn: 'root'
})
export class UserService {
private readonly apiUrl = 'https://fakestoreapi.com/users';
private readonly loginApiUrl = 'https://fakestoreapi.com/auth/login';
 
  // Using BehaviorSubject to track the authentication state
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
 
  // Observable for tracking authentication state
  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();
 
  constructor(private http: HttpClient, private router: Router) {}
 
  // Function to sign up a new user
  userSignUp(user: signUp): Observable<any> {
return this.http.post(this.apiUrl, user, { observe: 'response' }).pipe(
      tap(response => {
        if (response.body) {
          localStorage.setItem('user', JSON.stringify(response.body));
          this.isAuthenticatedSubject.next(true);
          this.router.navigate(['/']);
        }
      })
    );
  }
 
  // Function to log in a user and get a token
  userLogin(data: login): Observable<any> {
return this.http.post<any>(this.loginApiUrl, data).pipe(
      tap(response => {
        if (response.token) {
          localStorage.setItem('token', response.token);
          this.isAuthenticatedSubject.next(true);
          this.router.navigate(['/']);
        } else {
          this.isAuthenticatedSubject.next(false);
        }
      })
    );
  }
 
  // Function to check the authentication state
  checkAuthentication() {
    const token = localStorage.getItem('token');
    this.isAuthenticatedSubject.next(!!token);
  }
 
  // Function to log out a user
  logout() {
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    this.isAuthenticatedSubject.next(false);
    this.router.navigate(['/user-auth']);
  }
}
// user-auth.component.ts import { Componen... by Komal Sharma
10:28 AM
Komal Sharma
// user-auth.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { UserService } from '../service/user.service';
import { login, signUp } from '../model/user-type';
 
@Component({
  selector: 'app-user-auth',
  templateUrl: './user-auth.component.html',
  styleUrls: ['./user-auth.component.css']
})
export class UserAuthComponent implements OnInit {
  showLogin = true;
  authError = '';
loginForm: FormGroup = this.fb.group({
email: ['', [Validators.required, Validators.email]],
    password: ['', Validators.required]
  });
 
  signupForm: FormGroup = /*... your existing code ...*/;
 
  /* constructor(private fb: FormBuilder, private userService: UserService) {}
 
  ngOnInit(): void {
    this.userService.checkAuthentication();
  }
 
  signUp(data: signUp) {
    this.userService.userSignUp(data).subscribe(
      () => {},
      error => {
        console.error('Signup failed:', error);
        // Handle signup failure
      }
    );
  }
 
  login(data: login) {
    this.userService.userLogin(data).subscribe(
      () => {},
      error => {
        console.error('Login failed:', error);
        this.authError = 'Invalid email or password';
      }
    );
  }
 
  logout() {
    this.userService.logout();
  }
}
// auth.interceptor.ts import { Injectable ... by Komal Sharma
10:28 AM
Komal Sharma
// auth.interceptor.ts
import { Injectable } from '@angular/core';
import {
  HttpEvent,
  HttpInterceptor,
  HttpHandler,
  HttpRequest,
} from '@angular/common/http';
import { Observable } from 'rxjs';
 
@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  intercept(
    req: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    // Add the Authorization header if a token is present
    const token = localStorage.getItem('token');
    if (token) {
      const cloned = req.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`,
        },
      });
      return next.handle(cloned);
    }
 
    // If no token, proceed without modification
    return next.handle(req);
  }
} */
